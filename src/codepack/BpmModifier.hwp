/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package codepack;

import java.io.File;
import java.text.DecimalFormat;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JSlider;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;

/**
 *
 * @author cakeLemon(qwerE)
 */
public class BpmModifier extends javax.swing.JFrame {

    private final JFileChooser openFileChooser;
    private File lastDir;
    private final FileManager myFileManager;
    private boolean fileChosen = false;
    /**
     * Creates new form BpmModifier
     */
    public BpmModifier() {
        initComponents();
        
        myFileManager = new FileManager(this);
        openFileChooser = new JFileChooser();
        lastDir = myFileManager.getLastFile();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        openFileButton = new javax.swing.JButton();
        messageLabel = new javax.swing.JLabel();
        bpmSlider = new javax.swing.JSlider();
        text_BPM = new javax.swing.JLabel();
        bpmShower = new javax.swing.JLabel();
        applyButton = new javax.swing.JButton();
        intCheckBox = new javax.swing.JCheckBox();
        title = new javax.swing.JLabel();
        snapCheckBox = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("K-Shoot Mania BPM modifier");
        setResizable(false);

        openFileButton.setText("Open folder...");
        openFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileButtonActionPerformed(evt);
            }
        });

        messageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        messageLabel.setText("File not chosen!");

        bpmSlider.setMajorTickSpacing(10);
        bpmSlider.setMaximum(200);
        bpmSlider.setMinimum(50);
        bpmSlider.setMinorTickSpacing(10);
        bpmSlider.setPaintTicks(true);
        bpmSlider.setValue(100);
        bpmSlider.setEnabled(false);
        bpmSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                bpmSliderStateChanged(evt);
            }
        });

        text_BPM.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        text_BPM.setText("BPM:");

        bpmShower.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bpmShower.setText("100%");

        applyButton.setText("Apply");
        applyButton.setEnabled(false);
        applyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButtonActionPerformed(evt);
            }
        });

        intCheckBox.setText("Allow non-integer BPM values");
        intCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                intCheckBoxActionPerformed(evt);
            }
        });

        title.setFont(new java.awt.Font("굴림", 1, 18)); // NOI18N
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("K-Shoot Mania BPM modifier");

        snapCheckBox.setText("Snap to ticks");
        snapCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                snapCheckBoxActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("굴림", 0, 12)); // NOI18N
        jLabel1.setText("Warning: Do not use this while running K-shoot mania");

        jLabel2.setFont(new java.awt.Font("굴림", 0, 10)); // NOI18N
        jLabel2.setText("cakelemon");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(snapCheckBox)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(openFileButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(title)
                                    .addComponent(messageLabel))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(intCheckBox)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 100, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(text_BPM, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(bpmSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(bpmShower, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(162, 162, 162))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(applyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(224, 224, 224))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(41, 41, 41)
                                .addComponent(jLabel2))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(title)
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openFileButton)
                    .addComponent(messageLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(text_BPM)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bpmSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bpmShower)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(applyButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(snapCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(intCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel2))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public JLabel getMainText() {
	return messageLabel;
    }
    
    public String originalMsg;
    public void setMessage(String str) {
	originalMsg = messageLabel.getText();
	messageLabel.setText(originalMsg + ": " + str);
	//SwingUtilities.updateComponentTreeUI(this);
	this.setEnabled(false);
    }
    
    public void eraseMessage() {
	this.setEnabled(true);
	messageLabel.setText(originalMsg + ": Finished!");
    }
    
    private void setSlider() {
	if(intCheckBox.isSelected()) {
	    DecimalFormat fmt = new DecimalFormat("#.###");
	    text_BPM.setText("BPM: " + fmt.format(bpmSlider.getValue() * myFileManager.bpmValue_float / 100.0f));
	}
	else
	    text_BPM.setText("BPM: " + (int)((float)bpmSlider.getValue() * myFileManager.bpmValue_float / 100.0f));
    }
    
    private void openFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileButtonActionPerformed
        openFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                openFileChooser.setAcceptAllFileFilterUsed(false);
                openFileChooser.setCurrentDirectory(lastDir);
                int returnValue = openFileChooser.showOpenDialog(openFileChooser);
                if(returnValue == JFileChooser.APPROVE_OPTION) {
                    File file = openFileChooser.getSelectedFile();
                    lastDir = openFileChooser.getCurrentDirectory();
                    messageLabel.setText(file.getName());
                    
                    
                    int res = myFileManager.getSettings(file);
		    if(res == 0) {
			fileChosen = true;
			bpmSlider.setEnabled(true);
			applyButton.setEnabled(true);
			
			setSlider();
		    }
		    else {
			fileChosen = false;
			bpmSlider.setEnabled(false);
			applyButton.setEnabled(false);
		    }
                    //System.out.println(myFileManager.bpmValue);
                }
                else {
                    messageLabel.setText("No file chosen!");
                    fileChosen = false;
		    bpmSlider.setEnabled(false);
		    applyButton.setEnabled(false);
                }
    }//GEN-LAST:event_openFileButtonActionPerformed

    private void bpmSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_bpmSliderStateChanged
        JSlider source = (JSlider)evt.getSource();
        bpmShower.setText("" + source.getValue() + "%");
	setSlider();
    }//GEN-LAST:event_bpmSliderStateChanged

    private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyButtonActionPerformed
        //setMessage("Stretching music... please wait");
	originalMsg = messageLabel.getText();
	if(originalMsg.endsWith(": Finished!"))
	    originalMsg = originalMsg.substring(0, originalMsg.length() - ": Finished!".length());
	//messageLabel.setText(originalMsg + ": " + "Stretching music... please wait");
	messageLabel.setText("Wait...");
	messageLabel.paintImmediately(messageLabel.getVisibleRect());
	this.setEnabled(false);
	
	int k = 0;
	if(fileChosen)
	    k = myFileManager.apply(bpmSlider.getValue(), intCheckBox.isSelected());
	if(k == 1)
	    eraseMessage();
    }//GEN-LAST:event_applyButtonActionPerformed

    private void intCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_intCheckBoxActionPerformed
        setSlider();
    }//GEN-LAST:event_intCheckBoxActionPerformed

    private void snapCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_snapCheckBoxActionPerformed
        JCheckBox cbLog = (JCheckBox) evt.getSource();
        bpmSlider.setSnapToTicks(cbLog.isSelected());
	if(cbLog.isSelected()) {
	    bpmSlider.setValue((bpmSlider.getValue() + 5) / 10 * 10);
	}
    }//GEN-LAST:event_snapCheckBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        }
        catch (Exception e) {

        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BpmModifier().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton applyButton;
    private javax.swing.JLabel bpmShower;
    private javax.swing.JSlider bpmSlider;
    private javax.swing.JCheckBox intCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JButton openFileButton;
    private javax.swing.JCheckBox snapCheckBox;
    private javax.swing.JLabel text_BPM;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
